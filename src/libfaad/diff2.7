diff --git a/src/libfaad/common/mp4ff/mp4ff.c b/src/libfaad/common/mp4ff/mp4ff.c
index aeb31fd5..f513e860 100644
--- a/src/libfaad/common/mp4ff/mp4ff.c
+++ b/src/libfaad/common/mp4ff/mp4ff.c
@@ -304,22 +304,7 @@ int32_t mp4ff_num_samples(const mp4ff_t *f, const int32_t track)
     return total;
 }
 
-int32_t mp4ff_get_max_samples_size(const mp4ff_t *f, const int track)
-{
-    const mp4ff_track_t * p_track = f->track[track];
-    int32_t bytes = p_track->stsz_sample_size;
 
-    if (!bytes)
-    {
-        int32_t *sp = p_track->stsz_table;
-        int32_t *end = sp + p_track->stsz_sample_count;
-        for (; sp != end; ++sp)
-            if (*sp > bytes)
-                bytes = *sp;
-    }
-
-    return bytes;
-}
 
 
 uint32_t mp4ff_get_sample_rate(const mp4ff_t *f, const int32_t track)
@@ -353,13 +338,12 @@ int32_t mp4ff_get_sample_duration_use_offsets(const mp4ff_t *f, const int32_t tr
 int32_t mp4ff_get_sample_duration(const mp4ff_t *f, const int32_t track, const int32_t sample)
 {
     int32_t i, co = 0;
-    const mp4ff_track_t *p_track = f->track[track];
 
-    for (i = 0; i < p_track->stts_entry_count; i++)
+    for (i = 0; i < f->track[track]->stts_entry_count; i++)
     {
-		int32_t delta = p_track->stts_sample_count[i];
+		int32_t delta = f->track[track]->stts_sample_count[i];
 		if (sample < co + delta)
-			return p_track->stts_sample_delta[i];
+			return f->track[track]->stts_sample_delta[i];
 		co += delta;
     }
     return (int32_t)(-1);
@@ -369,19 +353,18 @@ int64_t mp4ff_get_sample_position(const mp4ff_t *f, const int32_t track, const i
 {
     int32_t i, co = 0;
 	int64_t acc = 0;
-    const mp4ff_track_t *p_track = f->track[track];
 
-    for (i = 0; i < p_track->stts_entry_count; i++)
+    for (i = 0; i < f->track[track]->stts_entry_count; i++)
     {
-		int32_t delta = p_track->stts_sample_count[i];
+		int32_t delta = f->track[track]->stts_sample_count[i];
 		if (sample < co + delta)
 		{
-			acc += p_track->stts_sample_delta[i] * (sample - co);
+			acc += f->track[track]->stts_sample_delta[i] * (sample - co);
 			return acc;
 		}
 		else
 		{
-			acc += p_track->stts_sample_delta[i] * delta;
+			acc += f->track[track]->stts_sample_delta[i] * delta;
 		}
 		co += delta;
     }
@@ -391,13 +374,12 @@ int64_t mp4ff_get_sample_position(const mp4ff_t *f, const int32_t track, const i
 int32_t mp4ff_get_sample_offset(const mp4ff_t *f, const int32_t track, const int32_t sample)
 {
     int32_t i, co = 0;
-    const mp4ff_track_t *p_track = f->track[track];
 
-    for (i = 0; i < p_track->ctts_entry_count; i++)
+    for (i = 0; i < f->track[track]->ctts_entry_count; i++)
     {
-		int32_t delta = p_track->ctts_sample_count[i];
+		int32_t delta = f->track[track]->ctts_sample_count[i];
 		if (sample < co + delta)
-			return p_track->ctts_sample_offset[i];
+			return f->track[track]->ctts_sample_offset[i];
 		co += delta;
     }
     return 0;
diff --git a/src/libfaad/common/mp4ff/mp4ff.h b/src/libfaad/common/mp4ff/mp4ff.h
index a1cdb013..7e684289 100644
--- a/src/libfaad/common/mp4ff/mp4ff.h
+++ b/src/libfaad/common/mp4ff/mp4ff.h
@@ -80,7 +80,6 @@ int32_t mp4ff_get_decoder_config(const mp4ff_t *f, const int track,
 int32_t mp4ff_get_track_type(const mp4ff_t *f, const int track);
 int32_t mp4ff_total_tracks(const mp4ff_t *f);
 int32_t mp4ff_num_samples(const mp4ff_t *f, const int track);
-int32_t mp4ff_get_max_samples_size(const mp4ff_t *f, const int track);
 int32_t mp4ff_time_scale(const mp4ff_t *f, const int track);
 
 uint32_t mp4ff_get_avg_bitrate(const mp4ff_t *f, const int32_t track);
@@ -120,8 +119,6 @@ typedef struct
     char *value;
 } mp4ff_tag_t;
 
-uint32_t mp4ff_meta_get(const mp4ff_t *f, const mp4ff_tag_t **tags);
-
 /* metadata list structure */
 typedef struct
 {
diff --git a/src/libfaad/common/mp4ff/mp4tagupdate.c b/src/libfaad/common/mp4ff/mp4tagupdate.c
index 1f4265e8..ae29e128 100644
--- a/src/libfaad/common/mp4ff/mp4tagupdate.c
+++ b/src/libfaad/common/mp4ff/mp4tagupdate.c
@@ -365,7 +365,7 @@ static uint32_t create_ilst(const mp4ff_metadata_t * data,void ** out_buffer,uin
 		{
 			uint32_t index = mp4ff_meta_genre_to_index(genre_ptr);
 			if (index==0)
-				membuffer_write_std_tag(buf,"ï¿½gen",genre_ptr);
+				membuffer_write_std_tag(buf,"©gen",genre_ptr);
 			else
 				membuffer_write_int16_tag(buf,"gnre",(uint16_t)index);
 		}
@@ -653,11 +653,4 @@ int32_t mp4ff_meta_update(mp4ff_callback_t *f,const mp4ff_metadata_t * data)
 	mp4ff_close(ff);
     return 1;
 }
-
-uint32_t mp4ff_meta_get(const mp4ff_t *f, const mp4ff_tag_t **tags)
-{
-    *tags = f->tags.tags;
-    return f->tags.count;
-}
-
 #endif
diff --git a/src/libfaad/common/mp4ff/mp4util.c b/src/libfaad/common/mp4ff/mp4util.c
index 70df32bd..8acfcfe4 100644
--- a/src/libfaad/common/mp4ff/mp4util.c
+++ b/src/libfaad/common/mp4ff/mp4util.c
@@ -77,12 +77,7 @@ int32_t mp4ff_write_int32(mp4ff_t *f,const uint32_t data)
 
 int32_t mp4ff_set_position(mp4ff_t *f, const int64_t position)
 {
-    if (f->current_position == position)
-        return 0;
-
-    if (f->stream->seek(f->stream->user_data, position))
-        return ~0;
-
+    f->stream->seek(f->stream->user_data, position);
     f->current_position = position;
 
     return 0;
diff --git a/src/libfaad/include/neaacdec.h b/src/libfaad/include/neaacdec.h
index 3ffd3ded..8290faca 100644
--- a/src/libfaad/include/neaacdec.h
+++ b/src/libfaad/include/neaacdec.h
@@ -155,9 +155,9 @@ typedef struct mp4AudioSpecificConfig
     unsigned char aacSpectralDataResilienceFlag;
     unsigned char epConfig;
 
-    signed char sbr_present_flag;
-    signed char forceUpSampling;
-    signed char downSampledSBR;
+    char sbr_present_flag;
+    char forceUpSampling;
+    char downSampledSBR;
 } mp4AudioSpecificConfig;
 
 typedef struct NeAACDecConfiguration
@@ -198,7 +198,7 @@ typedef struct NeAACDecFrameInfo
     unsigned char ps;
 } NeAACDecFrameInfo;
 
-signed char* NEAACDECAPI NeAACDecGetErrorMessage(unsigned char errcode);
+char* NEAACDECAPI NeAACDecGetErrorMessage(unsigned char errcode);
 
 unsigned long NEAACDECAPI NeAACDecGetCapabilities(void);
 
@@ -217,14 +217,14 @@ long NEAACDECAPI NeAACDecInit(NeAACDecHandle hDecoder,
                               unsigned char *channels);
 
 /* Init the library using a DecoderSpecificInfo */
-signed char NEAACDECAPI NeAACDecInit2(NeAACDecHandle hDecoder,
+char NEAACDECAPI NeAACDecInit2(NeAACDecHandle hDecoder,
                                unsigned char *pBuffer,
                                unsigned long SizeOfDecoderSpecificInfo,
                                unsigned long *samplerate,
                                unsigned char *channels);
 
 /* Init the library for DRM */
-signed char NEAACDECAPI NeAACDecInitDRM(NeAACDecHandle *hDecoder, unsigned long samplerate,
+char NEAACDECAPI NeAACDecInitDRM(NeAACDecHandle *hDecoder, unsigned long samplerate,
                                  unsigned char channels);
 
 void NEAACDECAPI NeAACDecPostSeekReset(NeAACDecHandle hDecoder, long frame);
@@ -243,7 +243,7 @@ void* NEAACDECAPI NeAACDecDecode2(NeAACDecHandle hDecoder,
                                   void **sample_buffer,
                                   unsigned long sample_buffer_size);
 
-signed char NEAACDECAPI NeAACDecAudioSpecificConfig(unsigned char *pBuffer,
+char NEAACDECAPI NeAACDecAudioSpecificConfig(unsigned char *pBuffer,
                                              unsigned long buffer_size,
                                              mp4AudioSpecificConfig *mp4ASC);
 
diff --git a/src/libfaad/libfaad/analysis.h b/src/libfaad/libfaad/analysis.h
index 0e3f0fc3..c884c86c 100644
--- a/src/libfaad/libfaad/analysis.h
+++ b/src/libfaad/libfaad/analysis.h
@@ -37,7 +37,7 @@ extern "C" {
 
 
 #ifdef ANALYSIS
-#define DEBUGDEC        ,uint8_t print,uint16_t var,const uint8_t *dbg
+#define DEBUGDEC        ,uint8_t print,uint16_t var,uint8_t *dbg
 #define DEBUGVAR(A,B,C) ,A,B,C
 extern uint16_t dbg_count;
 #else
diff --git a/src/libfaad/libfaad/bits.h b/src/libfaad/libfaad/bits.h
index bfe9b10e..3a6b0bbc 100644
--- a/src/libfaad/libfaad/bits.h
+++ b/src/libfaad/libfaad/bits.h
@@ -180,7 +180,7 @@ static /*INLINE*/ uint32_t faad_getbits(bitfile *ld, uint32_t n DEBUGDEC)
 
 #ifdef ANALYSIS
     if (print)
-        fprintf(stderr, "%4d %2d bits, val: %4d, variable: %d %s\n", dbg_count++, n, ret, var, dbg);
+        fprintf(stdout, "%4d %2d bits, val: %4d, variable: %d %s\n", dbg_count++, n, ret, var, dbg);
 #endif
 
     return ret;
@@ -202,7 +202,7 @@ static INLINE uint8_t faad_get1bit(bitfile *ld DEBUGDEC)
     r = (uint8_t)(ld->bufb >> 31);
     faad_flushbits_ex(ld, 1);
 #else
-    r = (uint8_t)faad_getbits(ld, 1 DEBUGVAR(print,var,dbg));
+    r = (uint8_t)faad_getbits(ld, 1);
 #endif
     return r;
 }
@@ -279,7 +279,7 @@ static /*INLINE*/ uint32_t faad_getbits_rev(bitfile *ld, uint32_t n
 
 #ifdef ANALYSIS
     if (print)
-        fprintf(stderr, "%4d %2d bits, val: %4d, variable: %d %s\n", dbg_count++, n, ret, var, dbg);
+        fprintf(stdout, "%4d %2d bits, val: %4d, variable: %d %s\n", dbg_count++, n, ret, var, dbg);
 #endif
 
     return ret;
diff --git a/src/libfaad/libfaad/common.h b/src/libfaad/libfaad/common.h
index b1f777ce..b03c8b92 100644
--- a/src/libfaad/libfaad/common.h
+++ b/src/libfaad/libfaad/common.h
@@ -39,8 +39,6 @@ extern "C" {
 #  include "../config.h"
 #endif
 
-#define STDC_HEADERS 1
-
 #include "neaacdec.h"
 
 #if 1
@@ -371,6 +369,7 @@ char *strchr(), *strrchr();
 
 #ifdef HAVE_SINF
 #  define sin sinf
+#error
 #endif
 #ifdef HAVE_COSF
 #  define cos cosf
diff --git a/src/libfaad/libfaad/decoder.c b/src/libfaad/libfaad/decoder.c
index 2c3f97e1..08eea6cd 100644
--- a/src/libfaad/libfaad/decoder.c
+++ b/src/libfaad/libfaad/decoder.c
@@ -64,7 +64,7 @@ static void create_channel_config(NeAACDecStruct *hDecoder,
                                   NeAACDecFrameInfo *hInfo);
 
 
-signed char* NEAACDECAPI NeAACDecGetErrorMessage(unsigned char errcode)
+char* NEAACDECAPI NeAACDecGetErrorMessage(unsigned char errcode)
 {
     if (errcode >= NUM_ERROR_MESSAGES)
         return NULL;
@@ -225,7 +225,7 @@ static int latmCheck(latm_header *latm, bitfile *ld)
             while(bits>0)
             {
                 m = min(bits, 8);
-                faad_getbits(ld, m DEBUGVAR(1,1,__func__));
+                faad_getbits(ld, m);
                 bits -= m;
             }
         }
@@ -366,7 +366,7 @@ long NEAACDECAPI NeAACDecInit(NeAACDecHandle hpDecoder,
 }
 
 /* Init the library using a DecoderSpecificInfo */
-signed char NEAACDECAPI NeAACDecInit2(NeAACDecHandle hpDecoder,
+char NEAACDECAPI NeAACDecInit2(NeAACDecHandle hpDecoder,
                                unsigned char *pBuffer,
                                unsigned long SizeOfDecoderSpecificInfo,
                                unsigned long *samplerate,
@@ -460,7 +460,7 @@ signed char NEAACDECAPI NeAACDecInit2(NeAACDecHandle hpDecoder,
 }
 
 #ifdef DRM
-signed char NEAACDECAPI NeAACDecInitDRM(NeAACDecHandle *hpDecoder,
+char NEAACDECAPI NeAACDecInitDRM(NeAACDecHandle *hpDecoder,
                                  unsigned long samplerate,
                                  unsigned char channels)
 {
@@ -1176,7 +1176,7 @@ static void* aac_frame_decode(NeAACDecStruct *hDecoder,
 
     /* cleanup */
 #ifdef ANALYSIS
-    fflush(stderr);
+    fflush(stdout);
 #endif
 
 #ifdef PROFILE
@@ -1216,7 +1216,7 @@ error:
 
     /* cleanup */
 #ifdef ANALYSIS
-    fflush(stderr);
+    fflush(stdout);
 #endif
 
     return NULL;
diff --git a/src/libfaad/libfaad/hcr.c b/src/libfaad/libfaad/hcr.c
index 0e14d12d..c4901b37 100644
--- a/src/libfaad/libfaad/hcr.c
+++ b/src/libfaad/libfaad/hcr.c
@@ -197,11 +197,11 @@ static void read_segment(bits_t *segment, uint8_t segwidth, bitfile *ld)
 
      if (segwidth > 32)
      {
-        segment->bufb = faad_getbits(ld, segwidth - 32 DEBUGVAR(1,1,__func__));
-        segment->bufa = faad_getbits(ld, 32 DEBUGVAR(1,2,__func__));
+        segment->bufb = faad_getbits(ld, segwidth - 32);        
+        segment->bufa = faad_getbits(ld, 32);        
 
     } else {
-        segment->bufa = faad_getbits(ld, segwidth DEBUGVAR(1,3,__func__));
+        segment->bufa = faad_getbits(ld, segwidth);
         segment->bufb = 0;        
     }    
 }
diff --git a/src/libfaad/libfaad/mp4.c b/src/libfaad/libfaad/mp4.c
index abf083d0..8972a7a1 100644
--- a/src/libfaad/libfaad/mp4.c
+++ b/src/libfaad/libfaad/mp4.c
@@ -114,7 +114,7 @@ static uint8_t ObjectTypesTable[32] = {
 };
 
 /* Table 1.6.1 */
-signed char NEAACDECAPI NeAACDecAudioSpecificConfig(unsigned char *pBuffer,
+char NEAACDECAPI NeAACDecAudioSpecificConfig(unsigned char *pBuffer,
                                              unsigned long buffer_size,
                                              mp4AudioSpecificConfig *mp4ASC)
 {
@@ -142,7 +142,7 @@ int8_t AudioSpecificConfigFromBitfile(bitfile *ld,
     mp4ASC->samplingFrequencyIndex = (uint8_t)faad_getbits(ld, 4
         DEBUGVAR(1,2,"parse_audio_decoder_specific_info(): SamplingFrequencyIndex"));
 	if(mp4ASC->samplingFrequencyIndex==0x0f)
-		faad_getbits(ld, 24 DEBUGVAR(1,1,__func__));
+		faad_getbits(ld, 24);
 
     mp4ASC->channelsConfiguration = (uint8_t)faad_getbits(ld, 4
         DEBUGVAR(1,3,"parse_audio_decoder_specific_info(): ChannelsConfiguration"));
diff --git a/src/libfaad/libfaad/ps_syntax.c b/src/libfaad/libfaad/ps_syntax.c
index 16c2a448..dfe8f325 100644
--- a/src/libfaad/libfaad/ps_syntax.c
+++ b/src/libfaad/libfaad/ps_syntax.c
@@ -541,7 +541,7 @@ static INLINE int8_t ps_huff_dec(bitfile *ld, ps_huff_tab t_huff)
 
     while (index >= 0)
     {
-        bit = (uint8_t)faad_get1bit(ld DEBUGVAR(1,1,__func__));
+        bit = (uint8_t)faad_get1bit(ld);
         index = t_huff[index][bit];
     }
 
diff --git a/src/libfaad/libfaad/sbr_huff.c b/src/libfaad/libfaad/sbr_huff.c
index 71e913ea..afcbec47 100644
--- a/src/libfaad/libfaad/sbr_huff.c
+++ b/src/libfaad/libfaad/sbr_huff.c
@@ -229,7 +229,7 @@ static INLINE int16_t sbr_huff_dec(bitfile *ld, sbr_huff_tab t_huff)
 
     while (index >= 0)
     {
-        bit = (uint8_t)faad_get1bit(ld DEBUGVAR(1,1,__func__));
+        bit = (uint8_t)faad_get1bit(ld);
         index = t_huff[index][bit];
     }
 
diff --git a/src/libfaad/libfaad/syntax.c b/src/libfaad/libfaad/syntax.c
index cfb2d41a..a5d1d9c3 100644
--- a/src/libfaad/libfaad/syntax.c
+++ b/src/libfaad/libfaad/syntax.c
@@ -157,7 +157,7 @@ int8_t GASpecificConfig(bitfile *ld, mp4AudioSpecificConfig *mp4ASC,
                 DEBUGVAR(1,146,"GASpecificConfig(): aacSpectralDataResilienceFlag"));
         }
         /* 1 bit: extensionFlag3 */
-        faad_getbits(ld, 1 DEBUGVAR(1,147,__func__));
+        faad_getbits(ld, 1);
 	}
 #endif
 
@@ -2167,11 +2167,11 @@ static uint16_t extension_payload(bitfile *ld, drc_info *drc, uint16_t count)
         return n;
     case EXT_FILL_DATA:
         /* fill_nibble = */ faad_getbits(ld, 4
-            DEBUGVAR(1,136,"extension_payload(): fill_nibble")); /* must be ï¿½0000ï¿½ */
+            DEBUGVAR(1,136,"extension_payload(): fill_nibble")); /* must be 0000 */
         for (i = 0; i < count-1; i++)
         {
             /* fill_byte[i] = */ faad_getbits(ld, 8
-                DEBUGVAR(1,88,"extension_payload(): fill_byte")); /* must be ï¿½10100101ï¿½ */
+                DEBUGVAR(1,88,"extension_payload(): fill_byte")); /* must be 10100101 */
         }
         return count;
     case EXT_DATA_ELEMENT:
@@ -2455,10 +2455,10 @@ static uint32_t latm_get_value(bitfile *ld)
     uint32_t l, value;
     uint8_t bytesForValue;
 
-    bytesForValue = (uint8_t)faad_getbits(ld, 2 DEBUGVAR(1,1,__func__));
+    bytesForValue = (uint8_t)faad_getbits(ld, 2);
     value = 0;
     for(l=0; l<bytesForValue; l++)
-        value = (value << 8) | (uint8_t)faad_getbits(ld, 8 DEBUGVAR(1,2,__func__));
+        value = (value << 8) | (uint8_t)faad_getbits(ld, 8);
 
     return value;
 }
@@ -2477,7 +2477,7 @@ static uint32_t latmParsePayload(latm_header *latm, bitfile *ld)
     {
         do
         {
-            tmp = (uint8_t)faad_getbits(ld, 8 DEBUGVAR(1,1,__func__));
+            tmp = (uint8_t)faad_getbits(ld, 8);
             framelen += tmp;
         } while(tmp==0xff);
     }
@@ -2495,13 +2495,13 @@ static uint32_t latmAudioMuxElement(latm_header *latm, bitfile *ld)
     program_config pce;
     mp4AudioSpecificConfig mp4ASC;
 
-    latm->useSameStreamMux = (uint8_t)faad_getbits(ld, 1 DEBUGVAR(1,1,__func__));
+    latm->useSameStreamMux = (uint8_t)faad_getbits(ld, 1);
     if(!latm->useSameStreamMux)
     {
         //parseSameStreamMuxConfig
-        latm->version = (uint8_t) faad_getbits(ld, 1 DEBUGVAR(1,2,__func__));
+        latm->version = (uint8_t) faad_getbits(ld, 1);
         if(latm->version)
-            latm->versionA = (uint8_t) faad_getbits(ld, 1 DEBUGVAR(1,3,__func__));
+            latm->versionA = (uint8_t) faad_getbits(ld, 1);
         if(latm->versionA)
         {
             //dunno the payload format for versionA
@@ -2510,10 +2510,10 @@ static uint32_t latmAudioMuxElement(latm_header *latm, bitfile *ld)
         }
         if(latm->version) //read taraBufferFullness
             latm_get_value(ld);
-        latm->allStreamsSameTimeFraming = (uint8_t)faad_getbits(ld, 1 DEBUGVAR(1,4,__func__));
-        latm->numSubFrames = (uint8_t)faad_getbits(ld, 6 DEBUGVAR(1,5,__func__)) + 1;
-        latm->numPrograms = (uint8_t)faad_getbits(ld, 4 DEBUGVAR(1,6,__func__)) + 1;
-        latm->numLayers = faad_getbits(ld, 3 DEBUGVAR(1,7,__func__)) + 1;
+        latm->allStreamsSameTimeFraming = (uint8_t)faad_getbits(ld, 1);
+        latm->numSubFrames = (uint8_t)faad_getbits(ld, 6) + 1;
+        latm->numPrograms = (uint8_t)faad_getbits(ld, 4) + 1;
+        latm->numLayers = faad_getbits(ld, 3) + 1;
         if(latm->numPrograms>1 || !latm->allStreamsSameTimeFraming || latm->numSubFrames>1 || latm->numLayers>1)
         {
             fprintf(stderr, "\r\nUnsupported LATM configuration: %d programs/ %d subframes, %d layers, allstreams: %d\n",
@@ -2538,7 +2538,7 @@ static uint32_t latmAudioMuxElement(latm_header *latm, bitfile *ld)
             while(m>0)
             {
                 n = min(m, 32);
-                faad_getbits(ld, n DEBUGVAR(1,10,__func__));
+                faad_getbits(ld, n);
                 m -= n;
             }
 
@@ -2547,7 +2547,7 @@ static uint32_t latmAudioMuxElement(latm_header *latm, bitfile *ld)
             while(m > 0)
             {
                 n = min(m, 8);
-                latm->ASC[i++] = (uint8_t) faad_getbits(ld, n DEBUGVAR(1,11,__func__));
+                latm->ASC[i++] = (uint8_t) faad_getbits(ld, n);
                 m -= n;
             }
         }
@@ -2555,17 +2555,17 @@ static uint32_t latmAudioMuxElement(latm_header *latm, bitfile *ld)
         asc_bits = y1-x1;
 
         if(ascLen>asc_bits)
-            faad_getbits(ld, ascLen-asc_bits DEBUGVAR(1,12,__func__));
+            faad_getbits(ld, ascLen-asc_bits);
 
-        latm->framelen_type = (uint8_t) faad_getbits(ld, 3 DEBUGVAR(1,13,__func__));
+        latm->framelen_type = (uint8_t) faad_getbits(ld, 3);
         if(latm->framelen_type == 0)
         {
             latm->frameLength = 0;
-            faad_getbits(ld, 8 DEBUGVAR(1,14,__func__)); //buffer fullness for frame_len_type==0, useless
+            faad_getbits(ld, 8); //buffer fullness for frame_len_type==0, useless
         }
         else if(latm->framelen_type == 1)
         {
-            latm->frameLength = faad_getbits(ld, 9 DEBUGVAR(1,15,__func__));
+            latm->frameLength = faad_getbits(ld, 9);
             if(latm->frameLength==0)
             {
                 fprintf(stderr, "Invalid frameLength: 0\r\n");
@@ -2580,20 +2580,20 @@ static uint32_t latmAudioMuxElement(latm_header *latm, bitfile *ld)
         }
 
         latm->otherDataLenBits = 0;
-        if(faad_getbits(ld, 1 DEBUGVAR(1,20,__func__)))
+        if(faad_getbits(ld, 1))
         {   //other data present
             int esc, tmp;
             if(latm->version)
                 latm->otherDataLenBits = latm_get_value(ld);
             else do
             {
-                esc = faad_getbits(ld, 1 DEBUGVAR(1,21,__func__));
-                tmp = faad_getbits(ld, 8 DEBUGVAR(1,22,__func__));
+                esc = faad_getbits(ld, 1);
+                tmp = faad_getbits(ld, 8);
                 latm->otherDataLenBits = (latm->otherDataLenBits << 8) + tmp;
             } while(esc);
         }
-        if(faad_getbits(ld, 1 DEBUGVAR(1,23,__func__))) //crc
-            faad_getbits(ld, 8 DEBUGVAR(1,24,__func__));
+        if(faad_getbits(ld, 1)) //crc
+            faad_getbits(ld, 8);
         latm->inited = 1;
       }
 
@@ -2616,11 +2616,11 @@ uint32_t faad_latm_frame(latm_header *latm, bitfile *ld)
         faad_byte_align(ld);
         if(faad_showbits(ld, 11) != 0x2B7)
         {
-            faad_getbits(ld, 8 DEBUGVAR(1,1,__func__));
+            faad_getbits(ld, 8);
             continue;
         }
-        faad_getbits(ld, 11 DEBUGVAR(1,2,__func__));
-        len = faad_getbits(ld, 13 DEBUGVAR(1,3,__func__));
+        faad_getbits(ld, 11);
+        len = faad_getbits(ld, 13);
         if(!len)
             continue;
         initpos = faad_get_processed_bits(ld);
